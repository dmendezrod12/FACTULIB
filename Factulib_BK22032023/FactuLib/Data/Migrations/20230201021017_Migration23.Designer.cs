// <auto-generated />
using System;
using FactuLib.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FactuLib.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230201021017_Migration23")]
    partial class Migration23
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FactuLib.Areas.Clientes.Models.TClientes", b =>
                {
                    b.Property<int>("IdCliente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCliente"));

                    b.Property<string>("Apellido1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Apellido2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Cedula")
                        .HasColumnType("bigint");

                    b.Property<bool>("Credito")
                        .HasColumnType("bit");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Imagen")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdCliente");

                    b.ToTable("TClientes");
                });

            modelBuilder.Entity("FactuLib.Areas.Clientes.Models.TCorreosClientes", b =>
                {
                    b.Property<int>("idCorreo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idCorreo"));

                    b.Property<int?>("IdCliente")
                        .HasColumnType("int");

                    b.Property<string>("correo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idCorreo");

                    b.HasIndex("IdCliente");

                    b.ToTable("TCorreosClientes");
                });

            modelBuilder.Entity("FactuLib.Areas.Clientes.Models.TCreditoClientes", b =>
                {
                    b.Property<int>("idDeuda")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idDeuda"));

                    b.Property<decimal>("Cambio")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("CedulaCliente")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Deuda")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DeudaActual")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("FechaDeuda")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaLimite")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaPago")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Mensual")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("TClientsIdCliente")
                        .HasColumnType("int");

                    b.Property<string>("Ticket")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("UltimoPago")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("idDeuda");

                    b.HasIndex("TClientsIdCliente");

                    b.ToTable("TCreditoClientes");
                });

            modelBuilder.Entity("FactuLib.Areas.Clientes.Models.TDireccionCliente", b =>
                {
                    b.Property<int>("idDireccion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idDireccion"));

                    b.Property<long>("Cedula")
                        .HasColumnType("bigint");

                    b.Property<string>("Direccion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("clientesIdCliente")
                        .HasColumnType("int");

                    b.Property<int?>("idCanton")
                        .HasColumnType("int");

                    b.Property<int>("idDistrito")
                        .HasColumnType("int");

                    b.Property<int?>("idProvincia")
                        .HasColumnType("int");

                    b.HasKey("idDireccion");

                    b.HasIndex("clientesIdCliente");

                    b.HasIndex("idCanton");

                    b.HasIndex("idProvincia");

                    b.ToTable("TDireccionCliente");
                });

            modelBuilder.Entity("FactuLib.Areas.Clientes.Models.THistoricoPagosClientes", b =>
                {
                    b.Property<int>("IdPago")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPago"));

                    b.Property<decimal>("Cambio")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("CedulaCliente")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Deuda")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DeudaActual")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaLimite")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Pago")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Ticket")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdPago");

                    b.ToTable("THistoricoPagosClientes");
                });

            modelBuilder.Entity("FactuLib.Areas.Clientes.Models.TTelefonoCliente", b =>
                {
                    b.Property<int>("idTelefono")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idTelefono"));

                    b.Property<int?>("IdCliente")
                        .HasColumnType("int");

                    b.Property<string>("telefono")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idTelefono");

                    b.HasIndex("IdCliente");

                    b.ToTable("TTelefonoCliente");
                });

            modelBuilder.Entity("FactuLib.Areas.Compras.Models.TDetallesCompras", b =>
                {
                    b.Property<int>("Id_Detalle_Compras")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Detalle_Compras"));

                    b.Property<int>("Cantidad_Producto")
                        .HasColumnType("int");

                    b.Property<float>("Descuento_Detalle")
                        .HasColumnType("real");

                    b.Property<float>("Monto_Bruto_Detalle")
                        .HasColumnType("real");

                    b.Property<float>("Monto_Impuesto_Detalle")
                        .HasColumnType("real");

                    b.Property<float>("Monto_Neto_Detalle")
                        .HasColumnType("real");

                    b.Property<int?>("TProductoId_Producto")
                        .HasColumnType("int");

                    b.Property<int?>("TRegistroComprasId_RegistroCompras")
                        .HasColumnType("int");

                    b.HasKey("Id_Detalle_Compras");

                    b.HasIndex("TProductoId_Producto");

                    b.HasIndex("TRegistroComprasId_RegistroCompras");

                    b.ToTable("TDetallesCompras");
                });

            modelBuilder.Entity("FactuLib.Areas.Compras.Models.TRegistroCompras", b =>
                {
                    b.Property<int>("Id_RegistroCompras")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_RegistroCompras"));

                    b.Property<decimal>("CambioCompra")
                        .HasColumnType("decimal(18,2)");

                    b.Property<float>("DineroRecibido")
                        .HasColumnType("real");

                    b.Property<DateTime>("Fecha_Compra")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Id_Proveedor")
                        .HasColumnType("int");

                    b.Property<int>("MetodoPago")
                        .HasColumnType("int");

                    b.Property<string>("NumeroFacturaProveedor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Total_Bruto")
                        .HasColumnType("real");

                    b.Property<float>("Total_Descuento")
                        .HasColumnType("real");

                    b.Property<float>("Total_IVA")
                        .HasColumnType("real");

                    b.Property<float>("Total_Neto")
                        .HasColumnType("real");

                    b.HasKey("Id_RegistroCompras");

                    b.HasIndex("Id_Proveedor");

                    b.ToTable("TRegistroCompras");
                });

            modelBuilder.Entity("FactuLib.Areas.Compras.Models.TTemporalCompras", b =>
                {
                    b.Property<int>("idTempCompras")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idTempCompras"));

                    b.Property<int>("Cantidad_Compra")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IdProducto")
                        .HasColumnType("int");

                    b.Property<int?>("IdProveedor")
                        .HasColumnType("int");

                    b.Property<int?>("IdUser")
                        .HasColumnType("int");

                    b.Property<float>("TotalBruto")
                        .HasColumnType("real");

                    b.Property<float>("TotalDescuentos")
                        .HasColumnType("real");

                    b.Property<float>("TotalImpuestos")
                        .HasColumnType("real");

                    b.Property<float>("TotalNeto")
                        .HasColumnType("real");

                    b.HasKey("idTempCompras");

                    b.HasIndex("IdProducto");

                    b.HasIndex("IdProveedor");

                    b.HasIndex("IdUser");

                    b.ToTable("TTemporalCompras");
                });

            modelBuilder.Entity("FactuLib.Areas.Productos.Models.TProducto", b =>
                {
                    b.Property<int>("Id_Producto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Producto"));

                    b.Property<int>("Cantidad_Producto")
                        .HasColumnType("int");

                    b.Property<int>("Codigo_Producto")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion_Producto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Descuento_Producto")
                        .HasColumnType("int");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Id_TipoProducto")
                        .HasColumnType("int");

                    b.Property<byte[]>("Imagen")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Nombre_Producto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Precio_Costo")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Precio_Venta")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id_Producto");

                    b.HasIndex("Id_TipoProducto");

                    b.ToTable("TProducto");
                });

            modelBuilder.Entity("FactuLib.Areas.Productos.Models.TTipoProducto", b =>
                {
                    b.Property<int>("Id_TipoProducto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_TipoProducto"));

                    b.Property<string>("NombreTipo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_TipoProducto");

                    b.ToTable("TTipoProducto");
                });

            modelBuilder.Entity("FactuLib.Areas.Proveedores.Models.TCorreosProveedor", b =>
                {
                    b.Property<int>("idCorreo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idCorreo"));

                    b.Property<int?>("IdProveedor")
                        .HasColumnType("int");

                    b.Property<string>("correo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idCorreo");

                    b.HasIndex("IdProveedor");

                    b.ToTable("TCorreosProveedor");
                });

            modelBuilder.Entity("FactuLib.Areas.Proveedores.Models.TCreditoProveedor", b =>
                {
                    b.Property<int>("idCredito")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idCredito"));

                    b.Property<decimal>("Cambio")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Deuda")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DeudaActual")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("FechaDeuda")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaLimite")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaPago")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IdProveedor")
                        .HasColumnType("int");

                    b.Property<decimal>("Mensual")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Ticket")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("UltimoPago")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("idCredito");

                    b.HasIndex("IdProveedor");

                    b.ToTable("TCreditoProveedor");
                });

            modelBuilder.Entity("FactuLib.Areas.Proveedores.Models.TDireccionesProveedor", b =>
                {
                    b.Property<int>("idDireccion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idDireccion"));

                    b.Property<string>("Direccion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdProveedor")
                        .HasColumnType("int");

                    b.Property<int?>("idCanton")
                        .HasColumnType("int");

                    b.Property<int>("idDistrito")
                        .HasColumnType("int");

                    b.Property<int?>("idProvincia")
                        .HasColumnType("int");

                    b.HasKey("idDireccion");

                    b.HasIndex("IdProveedor");

                    b.HasIndex("idCanton");

                    b.HasIndex("idProvincia");

                    b.ToTable("TDireccionesProveedor");
                });

            modelBuilder.Entity("FactuLib.Areas.Proveedores.Models.THistoricoPagosProveedor", b =>
                {
                    b.Property<int>("IdPago")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPago"));

                    b.Property<decimal>("Cambio")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Deuda")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DeudaActual")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DeudaAnterior")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaDeuda")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaLimite")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Mensual")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Pago")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Ticket")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("idProveedor")
                        .HasColumnType("int");

                    b.HasKey("IdPago");

                    b.HasIndex("idProveedor");

                    b.ToTable("THistoricoPagosProveedor");
                });

            modelBuilder.Entity("FactuLib.Areas.Proveedores.Models.TProveedor", b =>
                {
                    b.Property<int>("IdProveedor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdProveedor"));

                    b.Property<long>("Ced_Jur")
                        .HasColumnType("bigint");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Imagen")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Nombre_Proveedor")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdProveedor");

                    b.ToTable("TProveedor");
                });

            modelBuilder.Entity("FactuLib.Areas.Proveedores.Models.TTelefonosProveedor", b =>
                {
                    b.Property<int>("idTelefono")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idTelefono"));

                    b.Property<int?>("IdProveedor")
                        .HasColumnType("int");

                    b.Property<string>("telefono")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idTelefono");

                    b.HasIndex("IdProveedor");

                    b.ToTable("TTelefonosProveedor");
                });

            modelBuilder.Entity("FactuLib.Areas.Users.Models.TUser", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Apellido1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Apellido2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("NID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("TUsers");
                });

            modelBuilder.Entity("FactuLib.Models.TCanton", b =>
                {
                    b.Property<int>("idCanton")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idCanton"));

                    b.Property<int?>("idProvincia")
                        .HasColumnType("int");

                    b.Property<string>("nombreCanton")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idCanton");

                    b.HasIndex("idProvincia");

                    b.ToTable("TCanton");
                });

            modelBuilder.Entity("FactuLib.Models.TDistrito", b =>
                {
                    b.Property<int>("idDistrito")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idDistrito"));

                    b.Property<int?>("idCanton")
                        .HasColumnType("int");

                    b.Property<int?>("idProvincia")
                        .HasColumnType("int");

                    b.Property<string>("nombreDistrito")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idDistrito");

                    b.HasIndex("idCanton");

                    b.HasIndex("idProvincia");

                    b.ToTable("TDistrito");
                });

            modelBuilder.Entity("FactuLib.Models.TProvincia", b =>
                {
                    b.Property<int>("idProvincia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idProvincia"));

                    b.Property<string>("nombreProvincia")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idProvincia");

                    b.ToTable("TProvincia");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FactuLib.Areas.Clientes.Models.TCorreosClientes", b =>
                {
                    b.HasOne("FactuLib.Areas.Clientes.Models.TClientes", "cliente")
                        .WithMany()
                        .HasForeignKey("IdCliente");

                    b.Navigation("cliente");
                });

            modelBuilder.Entity("FactuLib.Areas.Clientes.Models.TCreditoClientes", b =>
                {
                    b.HasOne("FactuLib.Areas.Clientes.Models.TClientes", "TClients")
                        .WithMany("TCreditoClientes")
                        .HasForeignKey("TClientsIdCliente");

                    b.Navigation("TClients");
                });

            modelBuilder.Entity("FactuLib.Areas.Clientes.Models.TDireccionCliente", b =>
                {
                    b.HasOne("FactuLib.Areas.Clientes.Models.TClientes", "clientes")
                        .WithMany()
                        .HasForeignKey("clientesIdCliente");

                    b.HasOne("FactuLib.Models.TCanton", "TCanton")
                        .WithMany()
                        .HasForeignKey("idCanton");

                    b.HasOne("FactuLib.Models.TProvincia", "TProvincia")
                        .WithMany()
                        .HasForeignKey("idProvincia");

                    b.Navigation("TCanton");

                    b.Navigation("TProvincia");

                    b.Navigation("clientes");
                });

            modelBuilder.Entity("FactuLib.Areas.Clientes.Models.TTelefonoCliente", b =>
                {
                    b.HasOne("FactuLib.Areas.Clientes.Models.TClientes", "clientes")
                        .WithMany()
                        .HasForeignKey("IdCliente");

                    b.Navigation("clientes");
                });

            modelBuilder.Entity("FactuLib.Areas.Compras.Models.TDetallesCompras", b =>
                {
                    b.HasOne("FactuLib.Areas.Productos.Models.TProducto", "TProducto")
                        .WithMany()
                        .HasForeignKey("TProductoId_Producto");

                    b.HasOne("FactuLib.Areas.Compras.Models.TRegistroCompras", "TRegistroCompras")
                        .WithMany()
                        .HasForeignKey("TRegistroComprasId_RegistroCompras");

                    b.Navigation("TProducto");

                    b.Navigation("TRegistroCompras");
                });

            modelBuilder.Entity("FactuLib.Areas.Compras.Models.TRegistroCompras", b =>
                {
                    b.HasOne("FactuLib.Areas.Proveedores.Models.TProveedor", "TProveedor")
                        .WithMany()
                        .HasForeignKey("Id_Proveedor");

                    b.Navigation("TProveedor");
                });

            modelBuilder.Entity("FactuLib.Areas.Compras.Models.TTemporalCompras", b =>
                {
                    b.HasOne("FactuLib.Areas.Productos.Models.TProducto", "TProducto")
                        .WithMany()
                        .HasForeignKey("IdProducto");

                    b.HasOne("FactuLib.Areas.Proveedores.Models.TProveedor", "Tproveedor")
                        .WithMany()
                        .HasForeignKey("IdProveedor");

                    b.HasOne("FactuLib.Areas.Users.Models.TUser", "TUser")
                        .WithMany()
                        .HasForeignKey("IdUser");

                    b.Navigation("TProducto");

                    b.Navigation("TUser");

                    b.Navigation("Tproveedor");
                });

            modelBuilder.Entity("FactuLib.Areas.Productos.Models.TProducto", b =>
                {
                    b.HasOne("FactuLib.Areas.Productos.Models.TTipoProducto", "TTipoProducto")
                        .WithMany()
                        .HasForeignKey("Id_TipoProducto");

                    b.Navigation("TTipoProducto");
                });

            modelBuilder.Entity("FactuLib.Areas.Proveedores.Models.TCorreosProveedor", b =>
                {
                    b.HasOne("FactuLib.Areas.Proveedores.Models.TProveedor", "proveedor")
                        .WithMany()
                        .HasForeignKey("IdProveedor");

                    b.Navigation("proveedor");
                });

            modelBuilder.Entity("FactuLib.Areas.Proveedores.Models.TCreditoProveedor", b =>
                {
                    b.HasOne("FactuLib.Areas.Proveedores.Models.TProveedor", "TProveedor")
                        .WithMany()
                        .HasForeignKey("IdProveedor");

                    b.Navigation("TProveedor");
                });

            modelBuilder.Entity("FactuLib.Areas.Proveedores.Models.TDireccionesProveedor", b =>
                {
                    b.HasOne("FactuLib.Areas.Proveedores.Models.TProveedor", "proveedor")
                        .WithMany()
                        .HasForeignKey("IdProveedor");

                    b.HasOne("FactuLib.Models.TCanton", "TCanton")
                        .WithMany()
                        .HasForeignKey("idCanton");

                    b.HasOne("FactuLib.Models.TProvincia", "TProvincia")
                        .WithMany()
                        .HasForeignKey("idProvincia");

                    b.Navigation("TCanton");

                    b.Navigation("TProvincia");

                    b.Navigation("proveedor");
                });

            modelBuilder.Entity("FactuLib.Areas.Proveedores.Models.THistoricoPagosProveedor", b =>
                {
                    b.HasOne("FactuLib.Areas.Proveedores.Models.TProveedor", "proveedor")
                        .WithMany()
                        .HasForeignKey("idProveedor");

                    b.Navigation("proveedor");
                });

            modelBuilder.Entity("FactuLib.Areas.Proveedores.Models.TTelefonosProveedor", b =>
                {
                    b.HasOne("FactuLib.Areas.Proveedores.Models.TProveedor", "proveedor")
                        .WithMany()
                        .HasForeignKey("IdProveedor");

                    b.Navigation("proveedor");
                });

            modelBuilder.Entity("FactuLib.Models.TCanton", b =>
                {
                    b.HasOne("FactuLib.Models.TProvincia", "provincia")
                        .WithMany()
                        .HasForeignKey("idProvincia");

                    b.Navigation("provincia");
                });

            modelBuilder.Entity("FactuLib.Models.TDistrito", b =>
                {
                    b.HasOne("FactuLib.Models.TCanton", "canton")
                        .WithMany()
                        .HasForeignKey("idCanton");

                    b.HasOne("FactuLib.Models.TProvincia", "provincia")
                        .WithMany()
                        .HasForeignKey("idProvincia");

                    b.Navigation("canton");

                    b.Navigation("provincia");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FactuLib.Areas.Clientes.Models.TClientes", b =>
                {
                    b.Navigation("TCreditoClientes");
                });
#pragma warning restore 612, 618
        }
    }
}
